import streamlit as st
import numpy as np
import pandas as pd
import time
import datetime


def main():

    st.markdown("# –°–ï–†–ï–ì–ê –ü–û–õ–ï–¢–ï–õ–ò üéà")

    col1, col2, col3 = st.columns(3, gap="small")

    with col1:
        dep_city = st.selectbox(
        '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        ('–¢–æ–º—Å–∫', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'))

        st.write('–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', dep_city)

    with col2:
        dest_city = st.selectbox(
            "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
            ("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ú–æ—Å–∫–≤–∞", "–•–∞–±–∞—Ä–æ–≤—Å–∫", 
            "–ò—Ä–∫—É—Ç—Å–∫", "–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫", "–ù–µ—Ä—é–Ω–≥—Ä–∏", "–ú–∏—Ä–Ω—ã–π",
            "–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫", "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–ö–∞–º—á–∞—Ç—Å–∫–∏–π")
        )
        st.write('–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', dest_city)

    with col3:
        
        sub_col1, sub_col2 = st.columns(2, gap="small")
        
        with sub_col1:
            z1 = datetime.date.today()
            departure_d = st.date_input("–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞:", z1, format="DD.MM.YYYY")
        
        with sub_col2:
            z2 = datetime.date.today()
            arrival_d = st.date_input("–î–∞—Ç–∞ –ø—Ä–∏–ª–µ—Ç–∞:",z2, format="DD.MM.YYYY")

            if arrival_d < departure_d:
                z2 = z1
                st.write("–í—Å–µ –∫—Ä–∞—Å–∏–≤–æ")


    st.button("–ù–ê–ñ–ú–ò –ú–ï–ù–Ø")

    a = [1, 2, 3, 4]
    st.write(*a)

    x = st.slider('x')  # üëà this is a widget
    st.write(x, 'squared is', x)

    if x <= 1:
        chart_data = pd.DataFrame(
            np.random.randn(20, 4),
            columns=['a', 'b', 'c', 'd'])
    else:
        chart_data = pd.DataFrame(
            np.random.randn(x, 4),
            columns=['a', 'b', 'c', 'd'])

    st.line_chart(chart_data)

    st.sidebar.markdown("# Main page üéà")

def counter():
    latest_iteration = st.empty()
    bar = st.progress(0)

    for i in range(100):
        # Update the progress bar with each iteration.
        latest_iteration.text(f'Iteration {i+1}')
        bar.progress(i + 1)
        time.sleep(0.1)


if __name__ == "__main__":
    main()
    counter()